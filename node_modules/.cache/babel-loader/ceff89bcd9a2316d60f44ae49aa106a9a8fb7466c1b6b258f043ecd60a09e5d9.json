{"ast":null,"code":"import { nanoid } from \"nanoid\";\nclass SpaceTravelMockApi {\n  static prepareResponse() {\n    return {\n      isError: false,\n      data: null\n    };\n  }\n  static wait(duration = 1000) {\n    return new Promise(resolve => setTimeout(resolve, duration));\n  }\n  static getMockDb() {\n    let mockDb = localStorage.getItem(SpaceTravelMockApi.MOCK_DB_KEY);\n    if (!mockDb) {\n      localStorage.setItem(SpaceTravelMockApi.MOCK_DB_KEY, JSON.stringify(SpaceTravelMockApi.MOCK_DB));\n      mockDb = SpaceTravelMockApi.MOCK_DB;\n    } else {\n      mockDb = JSON.parse(mockDb);\n    }\n    return mockDb;\n  }\n  static setMockDb(mockDb) {\n    localStorage.setItem(SpaceTravelMockApi.MOCK_DB_KEY, JSON.stringify(mockDb));\n  }\n  static async getPlanets() {\n    await SpaceTravelMockApi.wait();\n    const response = SpaceTravelMockApi.prepareResponse();\n    try {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      response.data = mockDb.planets;\n    } catch (error) {\n      response.isError = true;\n      response.data = error;\n    }\n    return response;\n  }\n  static async getSpacecrafts() {\n    await SpaceTravelMockApi.wait();\n    const response = SpaceTravelMockApi.prepareResponse();\n    try {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      response.data = mockDb.spacecrafts;\n    } catch (error) {\n      response.isError = true;\n      response.data = error;\n    }\n    return response;\n  }\n  static async getSpacecraftById({\n    id\n  }) {\n    await SpaceTravelMockApi.wait();\n    const response = SpaceTravelMockApi.prepareResponse();\n    try {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      for (let i = 0; i < mockDb.spacecrafts.length; i++) {\n        const spacecraft = mockDb.spacecrafts[i];\n        if (spacecraft.id === id) {\n          response.data = spacecraft;\n          break;\n        }\n      }\n    } catch (error) {\n      response.isError = true;\n      response.data = error;\n    }\n    return response;\n  }\n  static async buildSpacecraft({\n    name,\n    capacity,\n    description,\n    pictureUrl = undefined\n  }) {\n    await SpaceTravelMockApi.wait();\n    const response = SpaceTravelMockApi.prepareResponse();\n    try {\n      const spacecraft = {\n        id: nanoid(),\n        name,\n        capacity,\n        description,\n        pictureUrl,\n        currentLocation: 2\n      };\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      mockDb.spacecrafts.push(spacecraft);\n      SpaceTravelMockApi.setMockDb(mockDb);\n    } catch (error) {\n      response.isError = true;\n      response.data = error;\n    }\n    return response;\n  }\n  static async destroySpacecraftById({\n    id\n  }) {\n    await SpaceTravelMockApi.wait();\n    const response = SpaceTravelMockApi.prepareResponse();\n    try {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      for (let i = 0; i < mockDb.spacecrafts.length; i++) {\n        const spacecraft = mockDb.spacecrafts[i];\n        if (spacecraft.id === id) {\n          mockDb.spacecrafts.splice(i, 1);\n          SpaceTravelMockApi.setMockDb(mockDb);\n        }\n      }\n    } catch (error) {\n      response.isError = true;\n      response.data = error;\n    }\n    return response;\n  }\n  static async sendSpacecraftToPlanet({\n    spacecraftId,\n    targetPlanetId\n  }) {\n    await SpaceTravelMockApi.wait();\n    const response = SpaceTravelMockApi.prepareResponse();\n    try {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      for (let i = 0; i < mockDb.spacecrafts.length; i++) {\n        const spacecraft = mockDb.spacecrafts[i];\n        if (spacecraft.id === spacecraftId) {\n          if (spacecraft.currentLocation === targetPlanetId) {\n            throw new Error(\"The spacecraft is already on this planet!\");\n          }\n          let transferredCapacity = spacecraft.capacity;\n          for (const planet of mockDb.planets) {\n            if (planet.id === spacecraft.currentLocation) {\n              if (planet.currentPopulation < transferredCapacity) {\n                transferredCapacity = planet.currentPopulation;\n              }\n              planet.currentPopulation -= transferredCapacity;\n            }\n          }\n          for (const planet of mockDb.planets) {\n            if (planet.id === targetPlanetId) {\n              planet.currentPopulation += transferredCapacity;\n            }\n          }\n          spacecraft.currentLocation = targetPlanetId;\n          SpaceTravelMockApi.setMockDb(mockDb);\n        }\n      }\n    } catch (error) {\n      response.isError = true;\n      response.data = error;\n    }\n    return response;\n  }\n}\nSpaceTravelMockApi.MOCK_DB = {\n  planets: [{\n    id: 0,\n    name: \"Mercury\",\n    currentPopulation: 0,\n    pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/8/88/Reprocessed_Mariner_10_image_of_Mercury.jpg\"\n  }, {\n    id: 1,\n    name: \"Venus\",\n    currentPopulation: 0,\n    pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Venus_globe.jpg/800px-Venus_globe.jpg\"\n  }, {\n    id: 2,\n    name: \"Earth\",\n    currentPopulation: 100000,\n    pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/The_Blue_Marble_%28remastered%29.jpg/800px-The_Blue_Marble_%28remastered%29.jpg\"\n  }, {\n    id: 3,\n    name: \"Mars\",\n    currentPopulation: 0,\n    pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/OSIRIS_Mars_true_color.jpg/800px-OSIRIS_Mars_true_color.jpg\"\n  }, {\n    id: 4,\n    name: \"Jupiter\",\n    currentPopulation: 0,\n    pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Jupiter%2C_image_taken_by_NASA%27s_Hubble_Space_Telescope%2C_June_2019.png/800px-Jupiter%2C_image_taken_by_NASA%27s_Hubble_Space_Telescope%2C_June_2019.png\"\n  }, {\n    id: 5,\n    name: \"Saturn\",\n    currentPopulation: 0,\n    pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/8423_20181_1saturn2016.jpg/1920px-8423_20181_1saturn2016.jpg\"\n  }, {\n    id: 6,\n    name: \"Uranus\",\n    currentPopulation: 0,\n    pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Uranus_as_seen_by_NASA%27s_Voyager_2_%28remastered%29_-_JPEG_converted.jpg/800px-Uranus_as_seen_by_NASA%27s_Voyager_2_%28remastered%29_-_JPEG_converted.jpg\"\n  }, {\n    id: 7,\n    name: \"Neptune\",\n    currentPopulation: 0,\n    pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/0/06/Neptune.jpg\"\n  }],\n  spacecrafts: [{\n    id: \"prispax\",\n    name: \"Prispax\",\n    capacity: 10000,\n    description: \"Presenting the Astrolux Odyssey: a revolutionary spacecraft merging cutting-edge technology with lavish luxury, designed to usher 10,000 passengers into the solar system's embrace. A marvel of engineering, its sleek exterior is adorned with solar panels, fueling advanced propulsion while minimizing environmental impact.\" + \"Within, the vessel transforms into a haven of opulence. Lavish suites offer cosmic panoramas, celestial artwork bedecks lounges, and sprawling gardens thrive in zero-gravity. Culinary excellence reigns in gourmet restaurants, while immersive theaters and VR chambers offer stellar entertainment.\" + \"Safety remains paramount with cosmic radiation shielding and top-tier medical facilities. The Astrolux Odyssey not only advances space exploration but redefines elegance, uniting humanity's thirst for knowledge with a taste of the sublime.\",\n    pictureUrl: null,\n    currentLocation: 2\n  }]\n};\nSpaceTravelMockApi.MOCK_DB_KEY = \"MOCK_DB\";\nexport default SpaceTravelMockApi;","map":{"version":3,"names":["nanoid","SpaceTravelMockApi","prepareResponse","isError","data","wait","duration","Promise","resolve","setTimeout","getMockDb","mockDb","localStorage","getItem","MOCK_DB_KEY","setItem","JSON","stringify","MOCK_DB","parse","setMockDb","getPlanets","response","planets","error","getSpacecrafts","spacecrafts","getSpacecraftById","id","i","length","spacecraft","buildSpacecraft","name","capacity","description","pictureUrl","undefined","currentLocation","push","destroySpacecraftById","splice","sendSpacecraftToPlanet","spacecraftId","targetPlanetId","Error","transferredCapacity","planet","currentPopulation"],"sources":["C:/Users/zeped/springboard/projects/react/space-travel/src/services/SpaceTravelMockApi.js"],"sourcesContent":["import {nanoid} from \"nanoid\";\n\nclass SpaceTravelMockApi\n{\n  static MOCK_DB = {\n    planets: [\n      {\n        id: 0,\n        name: \"Mercury\",\n        currentPopulation: 0,\n        pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/8/88/Reprocessed_Mariner_10_image_of_Mercury.jpg\"\n\n      },\n      {\n        id: 1,\n        name: \"Venus\",\n        currentPopulation: 0,\n        pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Venus_globe.jpg/800px-Venus_globe.jpg\"\n\n      },\n      {\n        id: 2,\n        name: \"Earth\",\n        currentPopulation: 100000,\n        pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/The_Blue_Marble_%28remastered%29.jpg/800px-The_Blue_Marble_%28remastered%29.jpg\"\n\n      },\n      {\n        id: 3,\n        name: \"Mars\",\n        currentPopulation: 0,\n        pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/OSIRIS_Mars_true_color.jpg/800px-OSIRIS_Mars_true_color.jpg\"\n      },\n      {\n        id: 4,\n        name: \"Jupiter\",\n        currentPopulation: 0,\n        pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Jupiter%2C_image_taken_by_NASA%27s_Hubble_Space_Telescope%2C_June_2019.png/800px-Jupiter%2C_image_taken_by_NASA%27s_Hubble_Space_Telescope%2C_June_2019.png\"\n\n      },\n      {\n        id: 5,\n        name: \"Saturn\",\n        currentPopulation: 0,\n        pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/8423_20181_1saturn2016.jpg/1920px-8423_20181_1saturn2016.jpg\"\n      },\n      {\n        id: 6,\n        name: \"Uranus\",\n        currentPopulation: 0,\n        pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Uranus_as_seen_by_NASA%27s_Voyager_2_%28remastered%29_-_JPEG_converted.jpg/800px-Uranus_as_seen_by_NASA%27s_Voyager_2_%28remastered%29_-_JPEG_converted.jpg\"\n      },\n      {\n        id: 7,\n        name: \"Neptune\",\n        currentPopulation: 0,\n        pictureUrl: \"https://upload.wikimedia.org/wikipedia/commons/0/06/Neptune.jpg\"\n      }\n    ],\n    spacecrafts: [\n      {\n        id: \"prispax\",\n        name: \"Prispax\",\n        capacity: 10000,\n        description: \"Presenting the Astrolux Odyssey: a revolutionary spacecraft merging cutting-edge technology with lavish luxury, designed to usher 10,000 passengers into the solar system's embrace. A marvel of engineering, its sleek exterior is adorned with solar panels, fueling advanced propulsion while minimizing environmental impact.\" +\n                     \"Within, the vessel transforms into a haven of opulence. Lavish suites offer cosmic panoramas, celestial artwork bedecks lounges, and sprawling gardens thrive in zero-gravity. Culinary excellence reigns in gourmet restaurants, while immersive theaters and VR chambers offer stellar entertainment.\" +\n                     \"Safety remains paramount with cosmic radiation shielding and top-tier medical facilities. The Astrolux Odyssey not only advances space exploration but redefines elegance, uniting humanity's thirst for knowledge with a taste of the sublime.\",\n        pictureUrl: null,\n        currentLocation: 2\n      }\n    ]\n  };\n  static MOCK_DB_KEY = \"MOCK_DB\";\n\n  static prepareResponse ()\n  {\n    return {\n      isError: false,\n      data: null\n    };\n  }\n\n  static wait (duration = 1000)\n  {\n    return new Promise(resolve => setTimeout(resolve, duration));\n  }\n\n  static getMockDb ()\n  {\n    let mockDb = localStorage.getItem(SpaceTravelMockApi.MOCK_DB_KEY);\n\n    if (!mockDb)\n    {\n      localStorage.setItem(SpaceTravelMockApi.MOCK_DB_KEY, JSON.stringify(SpaceTravelMockApi.MOCK_DB));\n      mockDb = SpaceTravelMockApi.MOCK_DB;\n    }\n    else\n    {\n      mockDb = JSON.parse(mockDb);\n    }\n\n    return mockDb;\n  }\n\n  static setMockDb (mockDb)\n  {\n    localStorage.setItem(SpaceTravelMockApi.MOCK_DB_KEY, JSON.stringify(mockDb));\n  }\n\n  static async getPlanets ()\n  {\n    await SpaceTravelMockApi.wait();\n\n    const response = SpaceTravelMockApi.prepareResponse();\n\n    try\n    {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      response.data = mockDb.planets;\n    }\n    catch (error)\n    {\n      response.isError = true;\n      response.data = error;\n    }\n\n    return response;\n  }\n\n  static async getSpacecrafts ()\n  {\n    await SpaceTravelMockApi.wait();\n\n    const response = SpaceTravelMockApi.prepareResponse();\n\n    try\n    {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      response.data = mockDb.spacecrafts;\n    }\n    catch (error)\n    {\n      response.isError = true;\n      response.data = error;\n    }\n\n    return response;\n  }\n\n  static async getSpacecraftById ({id})\n  {\n    await SpaceTravelMockApi.wait();\n\n    const response = SpaceTravelMockApi.prepareResponse();\n\n    try\n    {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n\n      for (let i = 0; i < mockDb.spacecrafts.length; i++)\n      {\n        const spacecraft = mockDb.spacecrafts[i];\n\n        if (spacecraft.id === id)\n        {\n          response.data = spacecraft;\n          break;\n        }\n      }\n    }\n    catch (error)\n    {\n      response.isError = true;\n      response.data = error;\n    }\n\n    return response;\n  }\n\n  static async buildSpacecraft ({name, capacity, description, pictureUrl = undefined})\n  {\n    await SpaceTravelMockApi.wait();\n\n    const response = SpaceTravelMockApi.prepareResponse();\n\n    try\n    {\n      const spacecraft = {id: nanoid(), name, capacity, description, pictureUrl, currentLocation: 2};\n\n      const mockDb = SpaceTravelMockApi.getMockDb();\n      mockDb.spacecrafts.push(spacecraft);\n      SpaceTravelMockApi.setMockDb(mockDb);\n    }\n    catch (error)\n    {\n      response.isError = true;\n      response.data = error;\n    }\n\n    return response;\n  }\n\n  static async destroySpacecraftById ({id})\n  {\n    await SpaceTravelMockApi.wait();\n\n    const response = SpaceTravelMockApi.prepareResponse();\n\n    try\n    {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n\n      for (let i = 0; i < mockDb.spacecrafts.length; i++)\n      {\n        const spacecraft = mockDb.spacecrafts[i];\n\n        if (spacecraft.id === id)\n        {\n          mockDb.spacecrafts.splice(i, 1);\n          SpaceTravelMockApi.setMockDb(mockDb);\n        }\n      }\n    }\n    catch (error)\n    {\n      response.isError = true;\n      response.data = error;\n    }\n\n    return response;\n  }\n\n  static async sendSpacecraftToPlanet ({spacecraftId, targetPlanetId})\n  {\n    await SpaceTravelMockApi.wait();\n\n    const response = SpaceTravelMockApi.prepareResponse();\n\n    try\n    {\n      const mockDb = SpaceTravelMockApi.getMockDb();\n\n      for (let i = 0; i < mockDb.spacecrafts.length; i++)\n      {\n        const spacecraft = mockDb.spacecrafts[i];\n\n        if (spacecraft.id === spacecraftId)\n        {\n          if (spacecraft.currentLocation === targetPlanetId)\n          {\n            throw new Error(\"The spacecraft is already on this planet!\");\n          }\n\n          let transferredCapacity = spacecraft.capacity;\n\n          for (const planet of mockDb.planets)\n          {\n            if (planet.id === spacecraft.currentLocation)\n            {\n              if (planet.currentPopulation < transferredCapacity)\n              {\n                transferredCapacity = planet.currentPopulation;\n              }\n\n              planet.currentPopulation -= transferredCapacity;\n            }\n          }\n\n          for (const planet of mockDb.planets)\n          {\n            if (planet.id === targetPlanetId)\n            {\n              planet.currentPopulation += transferredCapacity;\n            }\n          }\n\n          spacecraft.currentLocation = targetPlanetId;\n          SpaceTravelMockApi.setMockDb(mockDb);\n        }\n      }\n    }\n    catch (error)\n    {\n      response.isError = true;\n      response.data = error;\n    }\n\n    return response;\n  }\n}\n\nexport default SpaceTravelMockApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}